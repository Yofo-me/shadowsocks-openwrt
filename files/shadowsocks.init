#!/bin/sh /etc/rc.common
#
# Copyright (C) 2017 shadowsocks-openwrt
# Copyright (C) 2017 yushi studio <ywb94@qq.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=90
STOP=15

SERVICE_DAEMONIZE=1
NAME=shadowsocks
EXTRA_COMMANDS=rules
CONFIG_FILE=/var/etc/${NAME}.json
CONFIG_UDP_FILE=/var/etc/${NAME}_u.json
CONFIG_SOCK5_FILE=/var/etc/${NAME}_s.json
server_count=0
redir_tcp=0
redir_udp=0
local_enable=0

gfw_enable=0
dns_enable_flag=0
switch_enable=0
switch_server=$1

uci_get_by_name() {
	local ret=$(uci get $NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

gen_config_file() {
	# @param $1: Configruation name in UCI
	# @param $2: 0 for global server, 1 for udp relay server, 2 for socks5 proxy

	local host=$(uci_get_by_name $1 server)
	if echo $host | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" >/dev/null; then
		hostip=${host}
	elif [ "$host" != "${host#*:[0-9a-fA-F]}" ]; then
		hostip=${host}
	else
		hostip=$(ping ${host} -s 1 -c 1 | grep PING | cut -d'(' -f 2 | cut -d')' -f1)
		if echo $hostip | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" >/dev/null; then
			hostip=${hostip}
		else
			hostip=$(cat /etc/shadowsocks_ip)
		fi
	fi

	if [ $2 = "0" ]; then
		config_file=$CONFIG_FILE
	elif [ $2 = "1" ]; then
		config_file=$CONFIG_UDP_FILE
	else
		config_file=$CONFIG_SOCK5_FILE
	fi
	if [ $(uci_get_by_name $1 fast_open) = "1" ]; then
		fastopen="true"
	else
		fastopen="false"
	fi
	cat <<-EOF >$config_file
{
	"server": "$hostip",
	"server_port": $(uci_get_by_name $1 server_port),
	"local_address": "0.0.0.0",
	"local_port": $(uci_get_by_name $1 local_port),
	"password": "$(uci_get_by_name $1 password)",
	"timeout": $(uci_get_by_name $1 timeout 60),
	"method": "$(uci_get_by_name $1 encrypt_method)",
	"fast_open": $fastopen
}
EOF
}

get_arg_out() {
	case "$(uci_get_by_type access_control router_proxy 1)" in
	1) echo "-o" ;;
	2) echo "-O" ;;
	esac
}

start_rules() {
	local server=$(uci_get_by_name $GLOBAL_SERVER server)
	if echo $server | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" > /dev/null; then
		server=${server}
	elif [ "$server" != "${server#*:[0-9a-fA-F]}" ]; then
		server=${server}
	else
		server=$(ping ${server} -s 1 -c 1 | grep PING | cut -d'(' -f 2 | cut -d')' -f1)
		if echo $server | grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" > /dev/null; then
			echo $server > /etc/shadowsocks_ip
		else
			server=$(cat /etc/shadowsocks_ip)
		fi
	fi


	local local_port=$(uci_get_by_name $GLOBAL_SERVER local_port)
	local lan_ac_ips=$(uci_get_by_type access_control lan_ac_ips)
	local lan_ac_mode=$(uci_get_by_type access_control lan_ac_mode)
	local router_proxy=$(uci_get_by_type access_control router_proxy)

	if [ "$GLOBAL_SERVER" = "$UDP_RELAY_SERVER" ]; then
		ARG_UDP="-u" 
	elif [ -n "$UDP_RELAY_SERVER" ]; then
		ARG_UDP="-U"
		local udp_server=$(uci_get_by_name $UDP_RELAY_SERVER server)
		local udp_local_port=$(uci_get_by_name $UDP_RELAY_SERVER local_port)
	fi

	if [ -n "$lan_ac_ips" ]; then
		case "$lan_ac_mode" in
		w | W | b | B) local ac_ips="$lan_ac_mode$lan_ac_ips" ;;
		esac
	fi

	local gfwmode=""
	if [ "$gfw_enable" = "gfw" ]; then
		gfwmode="-g"
	fi

	/usr/bin/ss-rules \
		-s "$server" \
		-l "$local_port" \
		-S "$udp_server" \
		-L "$udp_local_port" \
		-a "$ac_ips" \
		-i "$(uci_get_by_type access_control wan_bp_list)" \
		-b "$(uci_get_by_type access_control wan_bp_ips)" \
		-w "$(uci_get_by_type access_control wan_fw_ips)" \
		$(get_arg_out) $gfwmode $ARG_UDP

	return $?
}

start_local() {
	local local_server=$(uci_get_by_type socks5_proxy server)
	[ "$local_server" = "nil" ] && return 1
	mkdir -p /var/run /var/etc

	gen_config_file $local_server 2
	service_start /usr/bin/ss-local -f /var/run/ss-local.pid -t 1 -c $CONFIG_SOCK5_FILE -u -l $(uci_get_by_type socks5_proxy local_port 1080) 
	local_enable=1
}

start_redir() {
	gen_config_file $GLOBAL_SERVER 0
	if [ "$ARG_UDP" = "-U" ]; then
		gen_config_file $UDP_RELAY_SERVER 1
		service_start /usr/bin/ss-redir -f /var/run/ss-reudp.pid -t 1 -c $CONFIG_UDP_FILE -U 
		redir_udp=1

		service_start /usr/bin/ss-redir -f /var/run/ss-retcp.pid -t 1 -c $CONFIG_FILE 
	elif [ "$ARG_UDP" = "-u" ]; then 
		service_start /usr/bin/ss-redir -f /var/run/ss-retcp.pid -t 1 -c $CONFIG_FILE -u 
	else
		service_start /usr/bin/ss-redir -f /var/run/ss-retcp.pid -t 1 -c $CONFIG_FILE 
	fi
	redir_tcp=1

	# This configuration is something nobody should touch
	# because the ss-tunnel port 5353 here is also used in its gfwlist parser
	if [ "$(uci_get_by_type global gfw_enable router)" = "gfw" ]; then
		local tunnel_port=$(uci_get_by_type global tunnel_port 5300)
		local tunnel_forward=$(uci_get_by_type global tunnel_forward 8.8.4.4:53)
		service_start /usr/bin/ss-tunnel -f /var/run/ss-dns.pid -t 1 -c $CONFIG_FILE -b 0.0.0.0 -u -l $tunnel_port -L $tunnel_forward
		dns_enable_flag=1
	fi

	if [ "$(uci_get_by_type global enable_switch)" = "1" ]; then
		if [ "$(uci_get_by_name $GLOBAL_SERVER switch_enable)" = "1" ]; then
			if [ -z "$switch_server" ]; then
				local switch_time=$(uci_get_by_type global switch_time)
				local switch_timeout=$(uci_get_by_type global switch_timeout)
				service_start /usr/bin/ss-switch start $switch_time $switch_timeout
				switch_enable=1
			fi
		fi
	fi

	return $?
}

gen_server_config_file() {
	if [ $(uci_get_by_name $1 fast_open) = "1" ]; then
		fastopen="true"
	else
		fastopen="false"
	fi
	cat <<-EOF >$2
{
	"server": "$(uci_get_by_name $1 server)",
	"server_port": $(uci_get_by_name $1 server_port),
	"password": "$(uci_get_by_name $1 password)",
	"timeout": $(uci_get_by_name $1 timeout 60),
	"method": "$(uci_get_by_name $1 encrypt_method)",
	"fast_open": $fastopen
}
EOF
}

start_server_instance() {
	if [ $(uci_get_by_name $1 enable) = "0" ]; then 
		return 1
	fi
	let server_count=server_count+1
	if [ $server_count = 1 ]; then
		iptables -N SS-SERVER-RULE && iptables -t filter -I INPUT -j SS-SERVER-RULE
	fi

	gen_server_config_file $1 /var/etc/${NAME}_${server_count}.json
	service_start /usr/bin/ss-server -f /var/run/ss-server${server_count}.pid -c /var/etc/${NAME}_${server_count}.json -u -t 1 
	iptables -t filter -A SS-SERVER-RULE -p tcp --dport $(uci_get_by_name $1 server_port) -j ACCEPT
	iptables -t filter -A SS-SERVER-RULE -p udp --dport $(uci_get_by_name $1 server_port) -j ACCEPT
	return 0
}

gen_serv_include() {
	FWI=$(uci get firewall.shadowsocks.path 2>/dev/null)
	[ -n "$FWI" ] || return 0
	if [ ! -f $FWI ]; then
		echo '#!/bin/sh' >$FWI
	fi
	extract_rules() {
		echo "*filter"
		iptables-save -t filter | grep SS-SERVER-RULE | sed -e "s/^-A INPUT/-I INPUT/"
		echo 'COMMIT'
	}
	cat <<-EOF >>$FWI
	iptables-restore -n <<-EOT
	$(extract_rules)
	EOT
EOF
}

start_server() {
	SERVER_ENABLE=$(uci_get_by_type server_global enable_server)
	[ "$SERVER_ENABLE" = 0 ] && return 0
	mkdir -p /var/run /var/etc

	config_load $NAME
	config_foreach start_server_instance server_config
	gen_serv_include
	return 0
}

rules() {
	[ "$GLOBAL_SERVER" = "nil" ] && return 1
	mkdir -p /var/run /var/etc
	UDP_RELAY_SERVER=$(uci_get_by_type global udp_relay_server)
	[ "$UDP_RELAY_SERVER" = "same" ] && UDP_RELAY_SERVER=$GLOBAL_SERVER
	if start_rules; then
		return 0
	else
		return 1
	fi
}

start() {
	mkdir -p /tmp/dnsmasq.d
	if [ $(uci_get_by_type global gfw_enable) = "gfw" ]; then
		if [ ! -f "/tmp/dnsmasq.d/shadowsocks.conf" ]; then
			echo "server=/#/127.0.0.1#5353" > /tmp/dnsmasq.d/shadowsocks.conf
			echo "conf-dir=/etc/dnsmasq.shadowsocks" >> /tmp/dnsmasq.d/shadowsocks.conf
		fi
	fi
	if [ -z "$switch_server" ]; then
		GLOBAL_SERVER=$(uci_get_by_type global global_server)
	else
		GLOBAL_SERVER=$switch_server
		switch_enable=1
	fi
	if rules; then
		start_redir
	fi
	start_server
	start_local
	sleep 2 && /etc/init.d/dnsmasq restart
	if [ $(uci_get_by_type global monitor_enable) = 1 ]; then
		let total_count=server_count+redir_tcp+redir_udp+local_enable+dns_enable_flag+switch_enable
		if [ $total_count -gt 0 ]; then
			service_start /usr/bin/ss-monitor $server_count $redir_tcp $redir_udp $local_enable $dns_enable_flag $switch_enable
		fi
	fi
}

stop() {
	rm -rf /tmp/dnsmasq.d/shadowsocks.conf
	/usr/bin/ss-rules -f
	srulecount=$(iptables -L | grep SS-SERVER-RULE | wc -l)
	if [ $srulecount -gt 0 ]; then
		iptables -F SS-SERVER-RULE
		iptables -t filter -D INPUT -j SS-SERVER-RULE
		iptables -X SS-SERVER-RULE 2>/dev/null
	fi

	ps | grep /usr/bin/ss- | grep -v grep | awk '{print $1}' | xargs kill -9
	sleep 2 && /etc/init.d/dnsmasq restart
}
